# Importing necessary libraries
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

# Loading datasets
gpu_specs_df = pd.read_csv('gpu_specs_v6.csv')
gpu_benchmarks_df = pd.read_csv('GPU_scores_graphicsAPIs.csv')

# Step 1: Data Overview and Basic Summary
print("GPU Specifications Dataset Overview")
print(gpu_specs_df.head())
print(gpu_specs_df.info())
print("GPU Benchmarks Dataset Overview")
print(gpu_benchmarks_df.head())
print(gpu_benchmarks_df.info())

# Step 2: Data Cleaning
# Check for missing values
print("Missing values in GPU Specs dataset:\n", gpu_specs_df.isnull().sum())
print("Missing values in GPU Benchmarks dataset:\n",
      gpu_benchmarks_df.isnull().sum())

# Drop duplicates if any
gpu_specs_df = gpu_specs_df.drop_duplicates()
gpu_benchmarks_df = gpu_benchmarks_df.drop_duplicates()

# Step 3: Categorical Data Analysis
# Analyze 'manufacturer' and 'memType' distributions
plt.figure(figsize=(10, 5))
sns.countplot(data=gpu_specs_df, x='manufacturer')
plt.title("Distribution of GPUs by Manufacturer")
plt.show()

# Check for missing values
gpu_specs_df['memSize'] = gpu_specs_df['memSize'].fillna(
    gpu_specs_df['memSize'].median())
gpu_specs_df['gpuClock'] = gpu_specs_df['gpuClock'].fillna(
    gpu_specs_df['gpuClock'].median())
gpu_benchmarks_df['CUDA'] = gpu_benchmarks_df['CUDA'].fillna(0)
gpu_benchmarks_df['OpenCL'] = gpu_benchmarks_df['OpenCL'].fillna(0)

# Remove duplicates
gpu_specs_df = gpu_specs_df.drop_duplicates()
gpu_benchmarks_df = gpu_benchmarks_df.drop_duplicates()

# Standardize GPU names for merging
gpu_specs_df['productName'] = gpu_specs_df['productName'].str.strip().str.lower()
gpu_benchmarks_df['Device'] = gpu_benchmarks_df['Device'].str.strip(
).str.lower()

# Map memory types for better grouping
mem_type_mapping = {
    'GDDR5': 'GDDR5/GDDR5X', 'GDDR5X': 'GDDR5/GDDR5X',
    'GDDR6': 'GDDR6/GDDR6X', 'GDDR6X': 'GDDR6/GDDR6X',
    'HBM2': 'HBM2', 'HBM': 'HBM2'
}
gpu_specs_df['memType'] = gpu_specs_df['memType'].map(
    mem_type_mapping).fillna('Other')

# Step 2: Feature Engineering
# Add memory bandwidth and log transform of memory size
gpu_specs_df['memory_bandwidth'] = gpu_specs_df['memBusWidth'] * \
    gpu_specs_df['memClock']
gpu_specs_df['log_memSize'] = np.log1p(gpu_specs_df['memSize'])

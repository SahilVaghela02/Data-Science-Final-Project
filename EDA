from xgboost import XGBRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import learning_curve
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error
from sklearn.model_selection import train_test_split
from fuzzywuzzy import fuzz
import xgboost as xgb
import warnings

warnings.filterwarnings("ignore")

# Step 1: Load the Datasets
gpu_specs = pd.read_csv('gpu_specs_v6.csv')
benchmarks = pd.read_csv('GPU_scores_graphicsAPIs.csv')

# ---- DATASET 1: GPU SPECS ----
print("\n--- GPU Specs Dataset Overview ---")
print("Shape of GPU Specs Dataset:", gpu_specs.shape)
print("Columns in GPU Specs Dataset:", gpu_specs.columns.tolist())
print("First 5 rows of GPU Specs Dataset:\n", gpu_specs.head())
print("\nMissing Values in GPU Specs Dataset:\n", gpu_specs.isnull().sum())

# Step 2A: Clean GPU Specs Dataset
gpu_specs['manufacturer'] = gpu_specs['manufacturer'].str.strip().str.lower()
gpu_specs = gpu_specs[gpu_specs['manufacturer']
                      == 'nvidia']  # Filter for NVIDIA GPUs
gpu_specs.drop(columns=['manufacturer'], inplace=True)

# Handle missing values
numerical_columns = ['memSize', 'memBusWidth', 'gpuClock', 'memClock']
gpu_specs[numerical_columns] = gpu_specs[numerical_columns].fillna(
    gpu_specs[numerical_columns].median()
)
gpu_specs['memType'] = gpu_specs['memType'].fillna(
    gpu_specs['memType'].mode()[0])

# Print values used to fill missing data
print("\n--- Missing Value Handling in GPU Specs ---")
for col in numerical_columns:
    print(
        f"Filled missing values in {col} with median value: {gpu_specs[col].median()}")
print(
    f"Filled missing values in 'memType' with mode: {gpu_specs['memType'].mode()[0]}")


# Map memory types to simplified categories
mem_type_mapping = {
    'GDDR5': 'GDDR5', 'GDDR5X': 'GDDR5',
    'GDDR6': 'GDDR6', 'GDDR6X': 'GDDR6',
    'HBM2': 'HBM2', 'HBM': 'HBM'
}
gpu_specs['memType'] = gpu_specs['memType'].map(
    mem_type_mapping).fillna('Other')

# Step 3: Categorical Data Analysis
# Analyze 'manufacturer' and 'memType' distributions
plt.figure(figsize=(10, 5))
sns.countplot(data=gpu_specs_df, x='manufacturer')
plt.title("Distribution of GPUs by Manufacturer")
plt.show()

# Check for missing values
gpu_specs_df['memSize'] = gpu_specs_df['memSize'].fillna(
    gpu_specs_df['memSize'].median())
gpu_specs_df['gpuClock'] = gpu_specs_df['gpuClock'].fillna(
    gpu_specs_df['gpuClock'].median())
gpu_benchmarks_df['CUDA'] = gpu_benchmarks_df['CUDA'].fillna(0)
gpu_benchmarks_df['OpenCL'] = gpu_benchmarks_df['OpenCL'].fillna(0)

# Remove duplicates
gpu_specs_df = gpu_specs_df.drop_duplicates()
gpu_benchmarks_df = gpu_benchmarks_df.drop_duplicates()

# Standardize GPU names for merging
gpu_specs_df['productName'] = gpu_specs_df['productName'].str.strip().str.lower()
gpu_benchmarks_df['Device'] = gpu_benchmarks_df['Device'].str.strip(
).str.lower()

# Map memory types for better grouping
mem_type_mapping = {
    'GDDR5': 'GDDR5/GDDR5X', 'GDDR5X': 'GDDR5/GDDR5X',
    'GDDR6': 'GDDR6/GDDR6X', 'GDDR6X': 'GDDR6/GDDR6X',
    'HBM2': 'HBM2', 'HBM': 'HBM2'
}
gpu_specs_df['memType'] = gpu_specs_df['memType'].map(
    mem_type_mapping).fillna('Other')

# Step 2: Feature Engineering
# Add memory bandwidth and log transform of memory size
gpu_specs_df['memory_bandwidth'] = gpu_specs_df['memBusWidth'] * \
    gpu_specs_df['memClock']
gpu_specs_df['log_memSize'] = np.log1p(gpu_specs_df['memSize'])
